//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Qt.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class QtParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, DISCARD=15, COMMENT=16, 
		ID=17, NUM=18, WS=19;
	public const int
		RULE_unit = 0, RULE_def = 1, RULE_ctxExt = 2, RULE_expr = 3, RULE_argExpr = 4, 
		RULE_letExpr = 5, RULE_idExpr = 6, RULE_defId = 7, RULE_elimExpr = 8, 
		RULE_elimCase = 9;
	public static readonly string[] ruleNames = {
		"unit", "def", "ctxExt", "expr", "argExpr", "letExpr", "idExpr", "defId", 
		"elimExpr", "elimCase"
	};

	private static readonly string[] _LiteralNames = {
		null, "'def'", "':'", "':='", "'.'", "'('", "')'", "'+'", "'='", "'let'", 
		"'in'", "'elim'", "'into'", "'|'", "'=>'", "'_'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "DISCARD", "COMMENT", "ID", "NUM", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Qt.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static QtParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QtParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QtParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class UnitContext : ParserRuleContext {
		public DefContext _def;
		public IList<DefContext> _defs = new List<DefContext>();
		public DefContext[] def() {
			return GetRuleContexts<DefContext>();
		}
		public DefContext def(int i) {
			return GetRuleContext<DefContext>(i);
		}
		public UnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.EnterUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.ExitUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQtVisitor<TResult> typedVisitor = visitor as IQtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnitContext unit() {
		UnitContext _localctx = new UnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 20; _localctx._def = def();
				_localctx._defs.Add(_localctx._def);
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefContext : ParserRuleContext {
		public DefIdContext name;
		public CtxExtContext _ctxExt;
		public IList<CtxExtContext> _exts = new List<CtxExtContext>();
		public ExprContext retTy;
		public ExprContext body;
		public DefIdContext defId() {
			return GetRuleContext<DefIdContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CtxExtContext[] ctxExt() {
			return GetRuleContexts<CtxExtContext>();
		}
		public CtxExtContext ctxExt(int i) {
			return GetRuleContext<CtxExtContext>(i);
		}
		public DefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.EnterDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.ExitDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQtVisitor<TResult> typedVisitor = visitor as IQtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefContext def() {
		DefContext _localctx = new DefContext(Context, State);
		EnterRule(_localctx, 2, RULE_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; Match(T__0);
			State = 27; _localctx.name = defId();
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 28; _localctx._ctxExt = ctxExt();
				_localctx._exts.Add(_localctx._ctxExt);
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 34; Match(T__1);
			State = 35; _localctx.retTy = expr(0);
			State = 36; Match(T__2);
			State = 37; _localctx.body = expr(0);
			State = 38; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CtxExtContext : ParserRuleContext {
		public DefIdContext _defId;
		public IList<DefIdContext> _names = new List<DefIdContext>();
		public ExprContext ty;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DefIdContext[] defId() {
			return GetRuleContexts<DefIdContext>();
		}
		public DefIdContext defId(int i) {
			return GetRuleContext<DefIdContext>(i);
		}
		public CtxExtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctxExt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.EnterCtxExt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.ExitCtxExt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQtVisitor<TResult> typedVisitor = visitor as IQtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtxExt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CtxExtContext ctxExt() {
		CtxExtContext _localctx = new CtxExtContext(Context, State);
		EnterRule(_localctx, 4, RULE_ctxExt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(T__4);
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 41; _localctx._defId = defId();
				_localctx._names.Add(_localctx._defId);
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DISCARD || _la==ID );
			State = 46; Match(T__1);
			State = 47; _localctx.ty = expr(0);
			State = 48; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext left;
		public ExprContext parenthesized;
		public IToken fun;
		public ArgExprContext _argExpr;
		public IList<ArgExprContext> _args = new List<ArgExprContext>();
		public LetExprContext let;
		public ElimExprContext elim;
		public IToken num;
		public IdExprContext id;
		public IToken op;
		public ExprContext right;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode ID() { return GetToken(QtParser.ID, 0); }
		public ArgExprContext[] argExpr() {
			return GetRuleContexts<ArgExprContext>();
		}
		public ArgExprContext argExpr(int i) {
			return GetRuleContext<ArgExprContext>(i);
		}
		public LetExprContext letExpr() {
			return GetRuleContext<LetExprContext>(0);
		}
		public ElimExprContext elimExpr() {
			return GetRuleContext<ElimExprContext>(0);
		}
		public ITerminalNode NUM() { return GetToken(QtParser.NUM, 0); }
		public IdExprContext idExpr() {
			return GetRuleContext<IdExprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQtVisitor<TResult> typedVisitor = visitor as IQtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 51; Match(T__4);
				State = 52; _localctx.parenthesized = expr(0);
				State = 53; Match(T__5);
				}
				break;
			case 2:
				{
				State = 55; _localctx.fun = Match(ID);
				State = 57;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 56; _localctx._argExpr = argExpr();
						_localctx._args.Add(_localctx._argExpr);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 59;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 3:
				{
				State = 61; _localctx.let = letExpr();
				}
				break;
			case 4:
				{
				State = 62; _localctx.elim = elimExpr();
				}
				break;
			case 5:
				{
				State = 63; _localctx.num = Match(NUM);
				}
				break;
			case 6:
				{
				State = 64; _localctx.id = idExpr();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 72;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 67;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 68;
					_localctx.op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==T__6 || _la==T__7) ) {
						_localctx.op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 69; _localctx.right = expr(4);
					}
					} 
				}
				State = 74;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgExprContext : ParserRuleContext {
		public ExprContext parenthesized;
		public IToken num;
		public IdExprContext id;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode NUM() { return GetToken(QtParser.NUM, 0); }
		public IdExprContext idExpr() {
			return GetRuleContext<IdExprContext>(0);
		}
		public ArgExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.EnterArgExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.ExitArgExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQtVisitor<TResult> typedVisitor = visitor as IQtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgExprContext argExpr() {
		ArgExprContext _localctx = new ArgExprContext(Context, State);
		EnterRule(_localctx, 8, RULE_argExpr);
		try {
			State = 81;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 75; Match(T__4);
				State = 76; _localctx.parenthesized = expr(0);
				State = 77; Match(T__5);
				}
				break;
			case NUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 79; _localctx.num = Match(NUM);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 80; _localctx.id = idExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetExprContext : ParserRuleContext {
		public DefIdContext varName;
		public ExprContext ty;
		public ExprContext val;
		public ExprContext body;
		public DefIdContext defId() {
			return GetRuleContext<DefIdContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LetExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.EnterLetExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.ExitLetExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQtVisitor<TResult> typedVisitor = visitor as IQtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetExprContext letExpr() {
		LetExprContext _localctx = new LetExprContext(Context, State);
		EnterRule(_localctx, 10, RULE_letExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; Match(T__8);
			State = 84; _localctx.varName = defId();
			State = 85; Match(T__1);
			State = 86; _localctx.ty = expr(0);
			State = 87; Match(T__2);
			State = 88; _localctx.val = expr(0);
			State = 89; Match(T__9);
			State = 90; _localctx.body = expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdExprContext : ParserRuleContext {
		public IToken id;
		public ITerminalNode ID() { return GetToken(QtParser.ID, 0); }
		public IdExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.EnterIdExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.ExitIdExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQtVisitor<TResult> typedVisitor = visitor as IQtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdExprContext idExpr() {
		IdExprContext _localctx = new IdExprContext(Context, State);
		EnterRule(_localctx, 12, RULE_idExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; _localctx.id = Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefIdContext : ParserRuleContext {
		public IToken id;
		public ITerminalNode ID() { return GetToken(QtParser.ID, 0); }
		public ITerminalNode DISCARD() { return GetToken(QtParser.DISCARD, 0); }
		public DefIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defId; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.EnterDefId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.ExitDefId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQtVisitor<TResult> typedVisitor = visitor as IQtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefIdContext defId() {
		DefIdContext _localctx = new DefIdContext(Context, State);
		EnterRule(_localctx, 14, RULE_defId);
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94; _localctx.id = Match(ID);
				}
				break;
			case DISCARD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 95; Match(DISCARD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElimExprContext : ParserRuleContext {
		public ExprContext discriminee;
		public CtxExtContext _ctxExt;
		public IList<CtxExtContext> _exts = new List<CtxExtContext>();
		public ExprContext intoTy;
		public ElimCaseContext _elimCase;
		public IList<ElimCaseContext> _cases = new List<ElimCaseContext>();
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CtxExtContext[] ctxExt() {
			return GetRuleContexts<CtxExtContext>();
		}
		public CtxExtContext ctxExt(int i) {
			return GetRuleContext<CtxExtContext>(i);
		}
		public ElimCaseContext[] elimCase() {
			return GetRuleContexts<ElimCaseContext>();
		}
		public ElimCaseContext elimCase(int i) {
			return GetRuleContext<ElimCaseContext>(i);
		}
		public ElimExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elimExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.EnterElimExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.ExitElimExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQtVisitor<TResult> typedVisitor = visitor as IQtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElimExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElimExprContext elimExpr() {
		ElimExprContext _localctx = new ElimExprContext(Context, State);
		EnterRule(_localctx, 16, RULE_elimExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(T__10);
			State = 99; _localctx.discriminee = expr(0);
			State = 100; Match(T__11);
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 101; _localctx._ctxExt = ctxExt();
				_localctx._exts.Add(_localctx._ctxExt);
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 107; Match(T__1);
			State = 108; _localctx.intoTy = expr(0);
			State = 112;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 109; _localctx._elimCase = elimCase();
					_localctx._cases.Add(_localctx._elimCase);
					}
					} 
				}
				State = 114;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElimCaseContext : ParserRuleContext {
		public CtxExtContext _ctxExt;
		public IList<CtxExtContext> _exts = new List<CtxExtContext>();
		public ExprContext body;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CtxExtContext[] ctxExt() {
			return GetRuleContexts<CtxExtContext>();
		}
		public CtxExtContext ctxExt(int i) {
			return GetRuleContext<CtxExtContext>(i);
		}
		public ElimCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elimCase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.EnterElimCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.ExitElimCase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQtVisitor<TResult> typedVisitor = visitor as IQtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElimCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElimCaseContext elimCase() {
		ElimCaseContext _localctx = new ElimCaseContext(Context, State);
		EnterRule(_localctx, 18, RULE_elimCase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(T__12);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 116; _localctx._ctxExt = ctxExt();
				_localctx._exts.Add(_localctx._ctxExt);
				}
				}
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 122; Match(T__13);
			State = 123; _localctx.body = expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x15', '\x80', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\a', '\x2', '\x18', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\x1B', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		' ', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '#', '\v', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x6', '\x4', '-', '\n', '\x4', '\r', 
		'\x4', '\xE', '\x4', '.', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', '<', '\n', '\x5', '\r', 
		'\x5', '\xE', '\x5', '=', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x44', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\a', '\x5', 'I', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'L', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'T', '\n', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '\x63', '\n', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\a', '\n', 'i', '\n', '\n', '\f', '\n', '\xE', 
		'\n', 'l', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', 
		'q', '\n', '\n', '\f', '\n', '\xE', '\n', 't', '\v', '\n', '\x3', '\v', 
		'\x3', '\v', '\a', '\v', 'x', '\n', '\v', '\f', '\v', '\xE', '\v', '{', 
		'\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x2', 
		'\x3', '\b', '\f', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x2', '\x3', '\x3', '\x2', '\t', '\n', '\x2', '\x85', 
		'\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1C', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '*', '\x3', '\x2', '\x2', '\x2', '\b', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\n', 'S', '\x3', '\x2', '\x2', '\x2', '\f', 'U', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '^', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x12', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x14', 'u', '\x3', '\x2', '\x2', '\x2', '\x16', '\x18', '\x5', 
		'\x4', '\x3', '\x2', '\x17', '\x16', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x19', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x1D', '\a', '\x3', '\x2', '\x2', '\x1D', '!', '\x5', '\x10', '\t', '\x2', 
		'\x1E', ' ', '\x5', '\x6', '\x4', '\x2', '\x1F', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', ' ', '#', '\x3', '\x2', '\x2', '\x2', '!', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', '\x2', '\"', '$', 
		'\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', '$', 
		'%', '\a', '\x4', '\x2', '\x2', '%', '&', '\x5', '\b', '\x5', '\x2', '&', 
		'\'', '\a', '\x5', '\x2', '\x2', '\'', '(', '\x5', '\b', '\x5', '\x2', 
		'(', ')', '\a', '\x6', '\x2', '\x2', ')', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '*', ',', '\a', '\a', '\x2', '\x2', '+', '-', '\x5', '\x10', '\t', 
		'\x2', ',', '+', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', 
		'\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\a', 
		'\x4', '\x2', '\x2', '\x31', '\x32', '\x5', '\b', '\x5', '\x2', '\x32', 
		'\x33', '\a', '\b', '\x2', '\x2', '\x33', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x35', '\b', '\x5', '\x1', '\x2', '\x35', '\x36', '\a', '\a', 
		'\x2', '\x2', '\x36', '\x37', '\x5', '\b', '\x5', '\x2', '\x37', '\x38', 
		'\a', '\b', '\x2', '\x2', '\x38', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x39', ';', '\a', '\x13', '\x2', '\x2', ':', '<', '\x5', '\n', '\x6', 
		'\x2', ';', ':', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', 
		'\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x44', '\x3', '\x2', '\x2', '\x2', '?', '\x44', '\x5', '\f', 
		'\a', '\x2', '@', '\x44', '\x5', '\x12', '\n', '\x2', '\x41', '\x44', 
		'\a', '\x14', '\x2', '\x2', '\x42', '\x44', '\x5', '\xE', '\b', '\x2', 
		'\x43', '\x34', '\x3', '\x2', '\x2', '\x2', '\x43', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x43', '?', '\x3', '\x2', '\x2', '\x2', '\x43', '@', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x44', 'J', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\x46', '\f', '\x5', '\x2', '\x2', '\x46', 'G', '\t', '\x2', 
		'\x2', '\x2', 'G', 'I', '\x5', '\b', '\x5', '\x6', 'H', '\x45', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'L', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', '\t', 
		'\x3', '\x2', '\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 'M', 
		'N', '\a', '\a', '\x2', '\x2', 'N', 'O', '\x5', '\b', '\x5', '\x2', 'O', 
		'P', '\a', '\b', '\x2', '\x2', 'P', 'T', '\x3', '\x2', '\x2', '\x2', 'Q', 
		'T', '\a', '\x14', '\x2', '\x2', 'R', 'T', '\x5', '\xE', '\b', '\x2', 
		'S', 'M', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'S', 'R', '\x3', '\x2', '\x2', '\x2', 'T', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'V', '\a', '\v', '\x2', '\x2', 'V', 'W', '\x5', '\x10', '\t', 
		'\x2', 'W', 'X', '\a', '\x4', '\x2', '\x2', 'X', 'Y', '\x5', '\b', '\x5', 
		'\x2', 'Y', 'Z', '\a', '\x5', '\x2', '\x2', 'Z', '[', '\x5', '\b', '\x5', 
		'\x2', '[', '\\', '\a', '\f', '\x2', '\x2', '\\', ']', '\x5', '\b', '\x5', 
		'\x2', ']', '\r', '\x3', '\x2', '\x2', '\x2', '^', '_', '\a', '\x13', 
		'\x2', '\x2', '_', '\xF', '\x3', '\x2', '\x2', '\x2', '`', '\x63', '\a', 
		'\x13', '\x2', '\x2', '\x61', '\x63', '\a', '\x11', '\x2', '\x2', '\x62', 
		'`', '\x3', '\x2', '\x2', '\x2', '\x62', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x11', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', 
		'\r', '\x2', '\x2', '\x65', '\x66', '\x5', '\b', '\x5', '\x2', '\x66', 
		'j', '\a', '\xE', '\x2', '\x2', 'g', 'i', '\x5', '\x6', '\x4', '\x2', 
		'h', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 'l', '\x3', '\x2', '\x2', '\x2', 
		'j', 'h', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 
		'k', 'm', '\x3', '\x2', '\x2', '\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\a', '\x4', '\x2', '\x2', 'n', 'r', '\x5', '\b', '\x5', '\x2', 
		'o', 'q', '\x5', '\x14', '\v', '\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 
		'q', 't', '\x3', '\x2', '\x2', '\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 
		'r', 's', '\x3', '\x2', '\x2', '\x2', 's', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 'u', 'y', '\a', '\xF', '\x2', 
		'\x2', 'v', 'x', '\x5', '\x6', '\x4', '\x2', 'w', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'x', '{', '\x3', '\x2', '\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '|', '\x3', '\x2', '\x2', 
		'\x2', '{', 'y', '\x3', '\x2', '\x2', '\x2', '|', '}', '\a', '\x10', '\x2', 
		'\x2', '}', '~', '\x5', '\b', '\x5', '\x2', '~', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\r', '\x19', '!', '.', '=', '\x43', 'J', 'S', '\x62', 'j', 
		'r', 'y',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
